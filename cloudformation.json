{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"AWS CloudFormation Script",
   "Parameters":{
      "HashKeyElementName":{
         "Description":"HashType PrimaryKey Name",
         "Default":"gmail",
         "Type":"String",
         "AllowedPattern":"[a-zA-Z0-9]*",
         "MinLength":"1",
         "MaxLength":"2048",
         "ConstraintDescription":"must contain only alphanumberic characters"
      },
      "HashKeyElementType":{
         "Description":"HashType PrimaryKey Type",
         "Type":"String",
         "Default":"S",
         "AllowedPattern":"[S|N]",
         "MinLength":"1",
         "MaxLength":"1",
         "ConstraintDescription":"must be either S or N"
      },
      "ReadCapacityUnits":{
         "Description":"Provisioned read throughput",
         "Type":"Number",
         "Default":"5",
         "MinValue":"5",
         "MaxValue":"10000",
         "ConstraintDescription":"must be between 5 and 10000"
      },
      "WriteCapacityUnits":{
         "Description":"Provisioned write throughput",
         "Type":"Number",
         "Default":"10",
         "MinValue":"5",
         "MaxValue":"10000",
         "ConstraintDescription":"must be between 5 and 10000"
      }
   },
   "Resources":{
      "WeatherLocations":{
         "Type":"AWS::DynamoDB::Table",
         "Properties":{
            "TableName":"Weather_Locations_Test",
            "AttributeDefinitions":[
               {
                  "AttributeName":{
                     "Ref":"HashKeyElementName"
                  },
                  "AttributeType":{
                     "Ref":"HashKeyElementType"
                  }
               }
            ],
            "KeySchema":[
               {
                  "AttributeName":{
                     "Ref":"HashKeyElementName"
                  },
                  "KeyType":"HASH"
               }
            ],
            "ProvisionedThroughput":{
               "ReadCapacityUnits":{
                  "Ref":"ReadCapacityUnits"
               },
               "WriteCapacityUnits":{
                  "Ref":"WriteCapacityUnits"
               }
            }
         }
      },
      "SNSResourceName":{
         "Type":"AWS::SNS::Topic",
         "Properties":{
            "DisplayName":"Weather Report",
            "TopicName":"Weather-SNS-Topic-Test"
         }
      },
      "MyQueue":{
         "Properties":{
            "QueueName":"Weather-SQS-Test"
         },
         "Type":"AWS::SQS::Queue"
      },
      "LambdaEventRule":{
         "Type":"AWS::Events::Rule",
         "Properties":{
            "Name":"WeatherEventTest",
            "Description":"Schedule for running the Lambda every day at 12:01 am",
            "ScheduleExpression":"cron(* * * * ? *)",
            "State":"ENABLED",
            "Targets":[
               {
                  "Arn":{
                     "Fn::GetAtt":[
                        "LambdaFunResource",
                        "Arn"
                     ]
                  },
                  "Id":"TargetFunctionV1"
               }
            ]
         }
      },
      "LambdaFunResource":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "FunctionName":"Weather-Finder-Test-A",
            "Code":{
               "S3Bucket":"cloud-termassignment-bucket",
               "S3Key":"QR_Code_Generator-1.0-SNAPSHOT-jar-with-dependencies.jar"
            },
            "Description":"Used to process weather data and kepp in sqs",
            "Handler":"org.amazon.WeatherLocationsLambda::handleRequest",
            "Role":"arn:aws:iam::923540452677:role/LabRole",
            "Runtime":"java17",
            "Timeout":120
         }
      },
      "LambdaEventPermission":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "FunctionName":{
               "Ref":"LambdaFunResource"
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"events.amazonaws.com",
            "SourceArn":{
               "Fn::GetAtt":[
                  "LambdaEventRule",
                  "Arn"
               ]
            }
         }
      },
      "emailSubscribeLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "FunctionName":"Weather-Daily-Email",
            "Role":"arn:aws:iam::923540452677:role/LabRole",
            "Timeout":30,
            "Runtime":"python3.10",
            "PackageType":"Zip",
            "Handler":"index.lambda_handler",
            "Code":{
               "ZipFile":"import json\nimport boto3\n\ndef lambda_handler(event, context):\n    # Configure the AWS clients\n    sqs_client = boto3.client('sqs')\n    sns_client = boto3.client('sns')\n    \n    record = event['Records'][0]  # Assuming only one record\n    \n    # Extract the email and temperature data from the SQS message\n    msg_body_str = record['body']\n    msg_body = json.loads(msg_body_str)\n    print(\"Msg Body:\", msg_body)\n    email = msg_body.get('gmail')\n    temperature = msg_body.get('Temperature')\n    \n    print(\"Email:\", email)\n    print(\"Temp:\", temperature)\n    \n    if email and temperature:\n        # Create an SNS message with the temperature information\n        sns_message = f\"Temperature Information: {temperature}\"\n        \n        # Publish the message to the SNS topic\n        topic_arn = 'arn:aws:sns:us-east-1:923540452677:Weather-SNS-Topic-Test'\n        \n        response = sns_client.publish(\n            TargetArn=topic_arn,\n            Message=sns_message,  # Sending only the temperature information\n            MessageAttributes={\n                'email': {\n                    'DataType': 'String',\n                    'StringValue': email\n                }\n            }\n        )\n        \n        print(f\"Message sent to {email}: {sns_message}\")\n    \n    # Delete the SQS message after processing\n    receipt_handle = record['receiptHandle']\n    queue_url = 'https://sqs.us-east-1.amazonaws.com/923540452677/Weather-SQS-Test'\n    sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)\n"
            }
         }
      },
      "lambdaEventSourceMapping":{
         "Type":"AWS::Lambda::EventSourceMapping",
         "Properties":{
            "BatchSize":1,
            "EventSourceArn":"arn:aws:sqs:us-east-1:923540452677:Weather-SQS-Test",
            "FunctionName":{
               "Ref":"emailSubscribeLambda"
            }
         }
      },
      "weatherMailSubscription":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "FunctionName":"weatherMailSubscription",
            "Role":"arn:aws:iam::923540452677:role/LabRole",
            "Timeout":60,
            "Runtime":"python3.10",
            "PackageType":"Zip",
            "Handler":"index.lambda_handler",
            "Code":{
               "ZipFile":"import boto3\nimport json\n\n# Initialize the DynamoDB and SNS clients\ndynamodb = boto3.resource('dynamodb')\nsns = boto3.client('sns')\n\n# Name of the DynamoDB table\ntable_name = 'Weather_Locations_Test'\n\ndef lambda_handler(event, context):\n  try:\n    # Extract the Gmail and Location from the event\n    gmail = event['gmail']\n    location = event['location']\n    \n    # Put the data into the DynamoDB table\n    table = dynamodb.Table(table_name)\n    table.put_item(Item={'gmail': gmail, 'location': location})\n\n\n\n    # Create a subscription filter policy\n    filter_policy = {\n    'email': [gmail]\n  }\n\n    # Subscribe the Gmail to the SNS topic with the filter policy\n    topic_arn = 'arn:aws:sns:us-east-1:923540452677:Weather-SNS-Topic-Test'\n    subscription = sns.subscribe(\n    TopicArn=topic_arn,\n    Protocol='email',\n    Endpoint=gmail,\n    Attributes={\n    'FilterPolicy': json.dumps(filter_policy)\n  }\n    )\n    \n    return {\n    'statusCode': 200,\n    'body': 'Data stored in DynamoDB and Gmail subscribed to SNS topic with filter policy.'\n  }\n  except Exception as e:\n    return {\n    'statusCode': 500,\n    'body': f'Error: {e}'\n  }\n"
            }
         }
      },
      "WeatherAPI":{
         "Type":"AWS::ApiGateway::RestApi",
         "Properties":{
            "Name":"WeatherAPI",
            "EndpointConfiguration":{
               "Types":[
                  "REGIONAL"
               ]
            }
         }
      },
      "weatherAPIResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"WeatherAPI"
            },
            "ParentId":{
               "Fn::GetAtt":[
                  "WeatherAPI",
                  "RootResourceId"
               ]
            },
            "PathPart":"subscribe"
         },
         "DependsOn":[
            "WeatherAPI"
         ]
      },
      "subscribeCors":{
         "Type":"AWS::ApiGateway::Method",
         "Properties":{
            "ResourceId":{
               "Ref":"weatherAPIResource"
            },
            "RestApiId":{
               "Ref":"WeatherAPI"
            },
            "AuthorizationType":"NONE",
            "HttpMethod":"OPTIONS",
            "Integration":{
               "Type":"MOCK",
               "IntegrationResponses":[
                  {
                     "ResponseParameters":{
                        "method.response.header.Access-Control-Allow-Headers":"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin":"'*'"
                     },
                     "ResponseTemplates":{
                        "application/json":""
                     },
                     "StatusCode":"200"
                  }
               ],
               "PassthroughBehavior":"NEVER",
               "RequestTemplates":{
                  "application/json":"{\"statusCode\": 200}"
               }
            },
            "MethodResponses":[
               {
                  "ResponseModels":{
                     "application/json":"Empty"
                  },
                  "ResponseParameters":{
                     "method.response.header.Access-Control-Allow-Headers":true,
                     "method.response.header.Access-Control-Allow-Methods":true,
                     "method.response.header.Access-Control-Allow-Origin":true
                  },
                  "StatusCode":"200"
               }
            ]
         }
      },
      "weatherApiSubscribeEndpoint":{
         "Type":"AWS::ApiGateway::Method",
         "Properties":{
            "ResourceId":{
               "Ref":"weatherAPIResource"
            },
            "RestApiId":{
               "Ref":"WeatherAPI"
            },
            "AuthorizationType":"NONE",
            "HttpMethod":"POST",
            "Integration":{
               "Type":"AWS",
               "IntegrationHttpMethod":"POST",
               "Uri":{
                  "Fn::Sub":[
                     "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SUBSCRIBE_LAMBDA}/invocations",
                     {
                        "SUBSCRIBE_LAMBDA":{
                           "Fn::GetAtt":[
                              "weatherMailSubscription",
                              "Arn"
                           ]
                        }
                     }
                  ]
               },
               "IntegrationResponses":[
                  {
                     "StatusCode":200,
                     "ResponseTemplates":{
                        "application/json":"$input.json('$')"
                     },
                     "ResponseParameters":{
                        "method.response.header.Access-Control-Allow-Headers":"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin":"'*'"
                     }
                  }
               ],
               "RequestTemplates":{
                  "application/json":"$input.json('$')"
               }
            },
            "RequestParameters":{
               "method.request.querystring.name":false
            },
            "MethodResponses":[
               {
                  "ResponseParameters":{
                     "method.response.header.Access-Control-Allow-Headers":true,
                     "method.response.header.Access-Control-Allow-Methods":true,
                     "method.response.header.Access-Control-Allow-Origin":true
                  },
                  "StatusCode":"200"
               }
            ]
         },
         "DependsOn":[
            "weatherAPIResource",
            "weatherMailSubscription"
         ]
      },
      "weatherApiDeployment":{
         "Type":"AWS::ApiGateway::Deployment",
         "Properties":{
            "RestApiId":{
               "Ref":"WeatherAPI"
            },
            "StageName":"production"
         },
         "DependsOn":[
            "weatherApiSubscribeEndpoint"
         ]
      },
      "weatherApiSubscribePermission":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "FunctionName":{
               "Ref":"weatherMailSubscription"
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WeatherAPI}/*/*/*"
            }
         },
         "DependsOn":[
            "weatherApiDeployment"
         ]
      }
   },
		"Outputs": {
      "WeatherApiEndpoint": {
         "Description": "Endpoint of the Weather API",
         "Value": {
            "Fn::Join": [
               "",
               [
                  "https://",
                  {
                     "Ref": "WeatherAPI"
                  },
                  ".execute-api.",
                  {
                     "Ref": "AWS::Region"
                  },
                  ".amazonaws.com/production/subscribe"
               ]
            ]
         }
      
		}

   }
}